%{
	
	#include "output.hpp"
	using namespace output;

	extern int yylineno;

	int yylex();
	void yyerror(const char*);
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%left OR
%left AND


%token TRUE
%token FALSE
%token RETURN
%nonassoc IF
%nonassoc IFX
%nonassoc WHILE
%nonassoc ELSE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING

%right ASSIGN

%left  RELOPL
%nonassoc RELOPNA
%left BINOPL
%left BINOPH

%left LPAREN
%left RPAREN
%left LBRACE
%left RBRACE
%right NOT

%%


Program:    Funcs {printProductionRule(1);}
;

Funcs:		FuncDecl Funcs {printProductionRule(3);}
			|/*epsilon*/ {printProductionRule(2);}
;

FuncDecl:	RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {printProductionRule(4);}
;

RetType:	Type{printProductionRule(5);}
			|VOID {printProductionRule(6);}
;

Formals:	/*epsilon*/ {printProductionRule(7);}
			|FormalsList {printProductionRule(8);}
;

FormalsList: FormalDecl {printProductionRule(9);}
			 |FormalDecl COMMA FormalsList {printProductionRule(10);}
;

FormalDecl:  Type ID {printProductionRule(11);}
;

Statements:  Statement {printProductionRule(12);}
			 |Statements Statement {printProductionRule(13);}
;

Statement:   LBRACE Statements RBRACE {printProductionRule(14);}
			 |Type ID SC {printProductionRule(15);}
			 |Type ID ASSIGN Exp SC {printProductionRule(16);}
			 |ID ASSIGN Exp SC {printProductionRule(17);}
			 |Call SC {printProductionRule(18);}
			 |RETURN SC {printProductionRule(19);}
			 |RETURN Exp SC {printProductionRule(20);}
			 |IF LPAREN Exp RPAREN Statement %prec IFX {printProductionRule(21);}
			 |IF LPAREN Exp RPAREN Statement ELSE Statement {printProductionRule(22);}
			 |WHILE LPAREN Exp RPAREN Statement  %prec IFX {printProductionRule(23);}
			 |WHILE LPAREN Exp RPAREN Statement ELSE Statement {printProductionRule(24);}
			 |BREAK SC {printProductionRule(25);}
			 |CONTINUE {printProductionRule(26);}
;

Call:        ID LPAREN ExpList RPAREN {printProductionRule(27);}
			 |ID LPAREN RPAREN {printProductionRule(28);}
;

ExpList:     Exp {printProductionRule(29);}
			 |Exp COMMA ExpList {printProductionRule(30);}
;

Type:         INT {printProductionRule(31);}
			  |BYTE {printProductionRule(32);}
			  |BOOL {printProductionRule(33);}
;

Exp:          LPAREN Exp RPAREN {printProductionRule(34);}
			  |ID {printProductionRule(36);}
			  |Call {printProductionRule(37);}
			  |NUM {printProductionRule(38);}
			  |NUM B {printProductionRule(39);}
			  |STRING {printProductionRule(40);}
			  |TRUE {printProductionRule(41);}
			  |FALSE {printProductionRule(42);}
			  |Exp OR Exp {printProductionRule(45);}
			  |Exp AND Exp {printProductionRule(44);}
			  |Exp RELOPL Exp {printProductionRule(46);}
			  |Exp RELOPNA Exp {printProductionRule(46);}
			  |Exp BINOPL Exp {printProductionRule(35);}
			  |Exp BINOPH Exp {printProductionRule(35);}
			  |NOT Exp {printProductionRule(43);}
;




%%
void yyerror(const char*) {errorSyn(yylineno);}
int main(){
	return yyparse();
}
